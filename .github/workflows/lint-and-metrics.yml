# This workflow runs on every push to the main branch to analyze code quality.
name: Lint, Test, and Report Metrics

on:
  push:
    branches:
      - main

# Define permissions required for the job.
permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up our fast package manager, uv
      - name: Setup uv
        uses: astral-sh/setup-uv@v1
        with:
          version: 'latest'

      # IMPROVEMENT: Cache dependencies to speed up subsequent runs.
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      # CORRECTION: Create a virtual environment for uv to use.
      - name: Create virtual environment
        run: uv venv

      # Step 3: Install the project's dev dependencies
      - name: Install dependencies
        run: uv pip install -e ".[dev]"

      # Step 4: Check code formatting with Black. Fails if code is not formatted.
      - name: Check formatting with Black
        run: uv run black --check .

      # Step 5: Run Flake8 linter and count the number of issues
      - name: Run Flake8 Linter
        run: |
          uv run flake8 . --count --exit-zero > flake8_report.txt
          FLAKE8_ISSUES=$(tail -n1 flake8_report.txt || echo 0)
          echo "FLAKE8_ISSUES=$FLAKE8_ISSUES" >> $GITHUB_ENV
          echo "Flake8 found $FLAKE8_ISSUES issues."

      # Step 6: Calculate average code complexity with Radon
      - name: Calculate Code Complexity with Radon
        run: |
          uv run radon cc . -a -s > radon_report.txt
          AVG_COMPLEXITY=$(grep "Average complexity" radon_report.txt | awk '{print $NF}' | tr -d '()' || echo 0)
          echo "AVG_COMPLEXITY=${AVG_COMPLEXITY}" >> $GITHUB_ENV
          echo "Average complexity is $AVG_COMPLEXITY."
      
      # Step 7: Setup Snyk CLI
      - name: Setup Snyk
        uses: snyk/actions/setup@master
      
      # Step 8: Run Snyk Code Analysis
      - name: Run Snyk Code Test
        run: snyk code test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
