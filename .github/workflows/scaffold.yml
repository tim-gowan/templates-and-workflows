# This workflow is triggered by a self-service action in Port to create a new repository.
name: Scaffold New Service

# This allows the workflow to be triggered manually or by an API call.
on:
  workflow_dispatch:
    # Define the inputs that the workflow expects to receive from Port.
    inputs:
      repo_name:
        description: 'Name for the new repository'
        required: true
        type: string
      port_run_id:
        description: 'The Port run ID for reporting'
        required: true
        type: string

jobs:
  scaffold:
    runs-on: ubuntu-latest
    # Define environment variables at the job level.
    env:
      REPO_NAME: ${{ github.event.inputs.repo_name }}
      ORG_NAME: "tim-gowan" # Your GitHub username or organization
      PORT_RUN_ID: ${{ github.event.inputs.port_run_id }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}

    steps:
      - name: Send Starting Message to Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "ðŸš€ Starting scaffold process for repository: ${{ env.REPO_NAME }}"

      - name: Create repository from template
        id: create_repo
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          TEMPLATE_REPO: "tim-gowan/templates-and-workflows"
        run: |
          # Use the GitHub CLI to create a new repository from the template.
          # Capture stderr and continue even if the command fails.
          echo "Creating repository: ${{ env.ORG_NAME }}/${{ env.REPO_NAME }}"
          gh repo create ${{ env.ORG_NAME }}/${{ env.REPO_NAME }} --template=${{ env.TEMPLATE_REPO }} --public --description "New service: ${{ env.REPO_NAME }}" 2> /tmp/gh_error.log || true

      - name: Check for Creation Errors
        id: check_errors
        run: |
          # Check the captured error log for common issues.
          if grep -q "Name already exists on this account" /tmp/gh_error.log; then
            echo "error_message=Repository name '${{ env.REPO_NAME }}' already exists." >> $GITHUB_OUTPUT
            exit 1
          # Check if the error log is not empty, indicating an unknown error.
          elif [ -s /tmp/gh_error.log ]; then
            ERROR_CONTENT=$(cat /tmp/gh_error.log)
            echo "error_message=An error occurred during repository creation: $ERROR_CONTENT" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Report Creation Success
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "âœ… Repository created successfully!"

      - name: Register new service in Port ðŸš¢
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          operation: UPSERT
          blueprint: 'microservice'
          identifier: '"${{ env.ORG_NAME }}/${{ env.REPO_NAME }}"'
          title: '"${{ env.REPO_NAME }}"'
          properties: |
            {
              "url": "https://github.com/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}"
            }
      
      - name: Report Final Success
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: SUCCESS
          logMessage: "ðŸŽ‰ Scaffold complete! Your new repository is ready at https://github.com/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}"

      - name: Report Failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: "ðŸ”¥ Scaffold failed. Error: ${{ steps.check_errors.outputs.error_message || 'An unexpected error occurred.' }}"
